#!/home/hqureshi/miniconda3/bin/python

import postprocessing as pp
import sys
import matplotlib.pyplot as plt
import argparse

def parse_indices(length,indices):
    ids = list(range(length))
    out = []
    for i in indices:
        if i == 'all':
            return ids
        elif i.isdigit() or (i[1:].isdigit() and i[0] == "-"):
            t = int(i)
            try:
                out.append(ids[t])
            except:
                raise ValueError("Invalid Index")
        elif ":" in i:
            if (i.count(":") < 1) or (i.count(":") > 2):
                raise ValueError("Invalid slice")
            try:
                s = [int(i) if i else None for i in i.split(":")]
            except:
                raise ValueError("Invalid slice")
            out += ids[slice(*s)]
        else:
            raise ValueError("Invalid indices")
    return out


def plotpk(base_name : str,out_name : str,to_plot : list,folds : list, cm : str, legend : bool) -> None:
    pp.plot_pretty(dpi=300)

    run = pp.Run(base_name)

    to_plot = parse_indices(len(run.pks),to_plot)

    for i in to_plot:
        pk = run.pks[i]
        for f in folds:
            if type(cm) == type(None):
                pk.plot(folds=[f],label="z=" + str(round(pk.z,1)) + ", fold=" + str(f),linewidth=0.9)
            else:
                pk.plot(folds=[f],label="z=" + str(round(pk.z,1)) + ", fold=" + str(f),linewidth=0.9,c=pk.cmap(cm))

    run.plot_k_nyq(color="black",linestyles="dashed",linewidth=0.5)
    run.plot_k_nyq_2(color="black",linestyles="dashed",linewidth=0.5)
    if legend:
        plt.legend()

    plt.title("Power Spectrum\n" + r"$N_g = " + str(run.params["NG"]) + r"$, $N_p = " + str(run.params["NP"]) + r"$, $L = " + str(run.params["RL"]) + r"$ Mpc",size=10)

    plt.tight_layout()
    plt.savefig(out_name)
    plt.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="HACCGPM Utils")
    subparsers = parser.add_subparsers(dest="subparser_name")

    plotpk_parser = subparsers.add_parser('plotpk')
    plotpk_parser.add_argument('base_name', metavar="<OUTPUT_BASE_NAME>",type=str)
    plotpk_parser.add_argument('output', metavar="<output.jpg>",type=str)
    plotpk_parser.add_argument('pks', metavar="<pks>",type=str,nargs='+')
    plotpk_parser.add_argument('-f', '--folds',type=int,nargs='+',default=[0])
    plotpk_parser.add_argument('-c', '--cmap',type=str,default=None)
    plotpk_parser.add_argument('-l','--legend',action='store_true',default=False)

    args = parser.parse_args()
    if args.subparser_name == "plotpk":
        plotpk(args.base_name,args.output,args.pks,args.folds,args.cmap,args.legend)
    