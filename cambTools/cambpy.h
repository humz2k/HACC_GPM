#define CAMBPYSTR "import camb\nimport numpy as np\nfrom camb import model\nimport scipy.integrate\nimport scipy.misc\nimport warnings\n\nwarnings.filterwarnings('ignore')\n\ndef read_params(fname):\n    with open(fname,'r') as f:\n        raw = f.read().splitlines()\n\n    data = {}\n    for i in raw:\n        if (len(i.strip()) == 0) or (i.strip().startswith('#')):\n            pass\n        else:\n            try:\n                name,val = i.split()\n                data[name] = float(val)\n            except:\n                try:\n                    name,val = i.split()\n                    data[name] = val\n                except:\n                    pass\n    \n    return data\n\ndef hacc2camb(params):\n    h = params['HUBBLE']\n    Om_c = params['OMEGA_CDM']\n    Om_b = params['DEUT'] / (h**2)\n    Om_nu = params['OMEGA_NU']\n    n_eff_massless = params['N_EFF_MASSLESS']\n    n_eff_massive = params['N_EFF_MASSIVE']\n    w_0 = params['W_DE']\n    w_a = params['WA_DE']\n    T_cmb = params['T_CMB']\n    n_s = params['NS']\n    \n    omch2 = Om_c * (h**2)\n    ombh2 = Om_b * (h**2)\n    omnuh2 = Om_nu * (h**2)\n    h = h * 100\n    return {'H0': h,'ombh2': ombh2,'omch2':omch2}, n_s\n\ndef hacc2cosmology(params):\n    h = params['HUBBLE']\n    Om_c = params['OMEGA_CDM']\n    Om_b = params['DEUT'] / (h**2)\n    Om_nu = params['OMEGA_NU']\n    n_eff_massless = params['N_EFF_MASSLESS']\n    n_eff_massive = params['N_EFF_MASSIVE']\n    w_0 = params['W_DE']\n    w_a = params['WA_DE']\n    T_cmb = params['T_CMB']\n    n_s = params['NS']\n    \n    omch2 = Om_c * (h**2)\n    ombh2 = Om_b * (h**2)\n    omnuh2 = Om_nu * (h**2)\n    h = h * 100\n    return omch2,ombh2,omnuh2\n\ndef initcambpy():\n    fname = 'params'\n    #global PK\n    #print('Initializing Camb')\n    #haccparams = read_params(fname)\n    #cambparams,ns = hacc2camb(haccparams)\n    #pars = camb.CAMBparams()\n    #pars.set_cosmology(**cambparams)\n    #pars.InitPower.set_params(ns=ns)\n    #pars.set_matter_power(redshifts=[200], kmax=10.0)\n    #results = camb.get_results(pars)\n    #pars.NonLinear = model.NonLinear_none\n    #PK = results.get_matter_power_interpolator()\n    return None\n\ndef get_pk(z,k,ng,rl,fname):\n    #print('FNAME:',fname)\n    haccparams = read_params(fname)\n    cambparams,ns = hacc2camb(haccparams)\n    pars = camb.CAMBparams()\n    pars.set_cosmology(**cambparams)\n    pars.InitPower.set_params(ns=ns)\n    pars.set_matter_power(redshifts=[z], kmax=np.max(k))\n    results = camb.get_results(pars)\n    pars.NonLinear = model.NonLinear_none\n    PK = results.get_matter_power_interpolator()\n\n    idx = k==0\n    k[idx] = 1\n    out = PK.P(z,k)\n    out *= ((ng*ng*ng)/(rl*rl*rl))\n    out[idx] = 0\n    return out\n\ndef D_plus(OmM,OmL):\n    return (5/2)*OmM*(1/(OmM**(4/7) - OmL + (1+0.5*OmM)*(1+(1/70)*OmL)))\n\ndef z2a(z):\n    return 1/(1+z)\n\ndef a2z(a):\n    return (1/a) - 1\n\ndef da_dtau(a,OmM,OmL):\n    da_dtau_2 = 1+OmM*((1/a)-1) + OmL*((a**2) - 1)\n    return np.sqrt(da_dtau_2)\n\ndef da_dtau__3(a,OmM,OmL):\n    da_dtau_2 = 1+OmM*((1/a)-1) + OmL*((a**2) - 1)\n    return 1/(np.sqrt(da_dtau_2)**3)\n\ndef int_1_da_dtau_3(a,OmM,OmL):\n    return scipy.integrate.quad(da_dtau__3,0,a,(OmM,OmL))\n\ndef delta(a,OmM,OmL):\n    #a = z2a(z)\n    integral = int_1_da_dtau_3(a,OmM,OmL)\n    diff = da_dtau(a,OmM,OmL)\n    mul = (5*OmM)/(2*a)\n    return mul*diff*integral[0]\n\ndef dotDelta(a,OmM,OmL):\n    return scipy.misc.derivative(delta,a,1e-3,args=(OmM,OmL))\n\ndef f(z,OmM,OmL):\n    top = OmM*((1+z)**3)\n    bottom = OmM*((1+z)**3) - (OmM + OmL - 1)*((1+z)**2) + OmL\n    return (top/bottom)**(4/7)\n\ndef get_delta_and_dotDelta(z,z1,fname):\n    haccparams = read_params(fname)\n    cambparams,ns = hacc2camb(haccparams)\n    pars = camb.CAMBparams()\n    pars.set_cosmology(**cambparams)\n    OmB = pars.ombh2 / (pars.h**2)\n    OmC = pars.omch2 / (pars.h**2)\n    OmNu = pars.omnuh2 / (pars.h**2)\n    OmK = pars.omk\n    OmM = OmB + OmC\n    OmL = 1 - (OmB + OmC + OmNu + OmK)\n    d = delta(z2a(z),OmM,OmL)\n    d_dot = dotDelta(z2a(z1),OmM,OmL)\n    return np.array([d,d_dot],dtype=np.float64)\n\ncontext = { 'initcambpy': initcambpy, 'get_pk': get_pk, 'get_delta_and_dotDelta': get_delta_and_dotDelta}\nimport types\ntest_context_module = types.ModuleType('cambpymodule', 'Module created to provide a context for tests')\ntest_context_module.__dict__.update(context)\nimport sys\nsys.modules['cambpymodule'] = test_context_module"